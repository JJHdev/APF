-- 날짜포맷함수
CREATE OR REPLACE FUNCTION fn_fmt_strtodate(vi_strdate character varying, vi_gbn character varying)
  RETURNS character varying
  LANGUAGE plpgsql
AS
$body$
    DECLARE vo_date VARCHAR(20);
    DECLARE v_strExpDate VARCHAR(20);
BEGIN
    vo_date         = null;
    v_strExpDate    = REGEXP_REPLACE(vi_strDate, '[^0-9]+', '', 'g');

    IF LENGTH(TRIM(v_strExpDate)) = 8 THEN
        vo_date     = REGEXP_REPLACE(v_strExpDate, '(.{4})(.{2})(.{2})', CONCAT('\1',vi_gbn,'\2',vi_gbn,'\3'), 'g');
    ELSIF LENGTH(TRIM(v_strExpDate)) = 6 THEN
        vo_date     = REGEXP_REPLACE(v_strExpDate, '(.{4})(.{2})', CONCAT('\1',vi_gbn,'\2'), 'g');
    ELSE
        vo_date = v_strExpDate;
    END IF;

  RETURN vo_date; 
END;
$body$

-- 코드명칭조회
CREATE OR REPLACE FUNCTION FN_GET_CODENM (
    /**
     * =============================================================
     * title    : 공통코드 조회
     * author   : ntarget
     * date     : 2021.09.14
     * tables   : SYS_CODE
     * -------------------------------------------------------------
     *
     * @param       vi_upper    상위코드
     * @param       vi_code     코드
     * @return      vo_codenm   코드명
     * =============================================================
     */
    vi_upper character varying,
    vi_code   character varying
)
  RETURNS character varying
  LANGUAGE plpgsql
AS
$body$
    DECLARE vo_codenm VARCHAR(100);
BEGIN
    vo_codenm = null;

    SELECT CD_NM INTO vo_codenm
      FROM SYS_CODE
     WHERE UP_CD_ID     = vi_upper
       AND CD_ID        = vi_code
       AND USE_YN       = 'Y'
    ;

    RETURN vo_codenm;
END;
$body$

-- 투자분야 명칭조회
CREATE OR REPLACE FUNCTION FN_GET_INVTFLDNM (
    /**
     * =============================================================
     * title    : 투자분야 명칭조회
     * author   : LSH
     * date     : 2023.04.24
     * tables   : tb_invtrlm_code
     * -------------------------------------------------------------
     *
     * @param       vi_code   코드
     * @return      vo_name   코드명
     * =============================================================
     */
    vi_code   character varying
)
  RETURNS character varying
  LANGUAGE plpgsql
AS
$body$
    DECLARE vo_name VARCHAR(100);
BEGIN
    vo_name = null;

    SELECT invt_fld_nm 
      INTO vo_name
      FROM tb_invtrlm_code
     WHERE invt_fld_cd  = vi_code
       AND use_yn       = 'Y'
    ;

    RETURN vo_name;
END;
$body$

-- 업체 명칭조회
CREATE OR REPLACE FUNCTION FN_GET_ENTNM (
    /**
     * =============================================================
     * title    : 업체 명칭조회
     * author   : LSH
     * date     : 2023.04.24
     * tables   : tb_ent
     * -------------------------------------------------------------
     *
     * @param       vi_code   코드
     * @return      vo_name   코드명
     * =============================================================
     */
    vi_code   character varying
)
  RETURNS character varying
  LANGUAGE plpgsql
AS
$body$
    DECLARE vo_name VARCHAR(100);
BEGIN
    vo_name = null;

    SELECT bzenty_nm 
      INTO vo_name
      FROM tb_ent
     WHERE bzenty_no  = vi_code
    ;

    RETURN vo_name;
END;
$body$

-- 2023.05.15 코드명칭(설명포함)조회
CREATE OR REPLACE FUNCTION FN_GET_CODECN (
    /**
     * =============================================================
     * title    : 공통코드 조회
     * author   : ntarget
     * date     : 2021.09.14
     * tables   : SYS_CODE
     * -------------------------------------------------------------
     *
     * @param       vi_upper    상위코드
     * @param       vi_code     코드
     * @return      vo_codenm   코드명(코드설명)
     * =============================================================
     */
    vi_upper character varying,
    vi_code   character varying
)
  RETURNS character varying
  LANGUAGE plpgsql
AS
$body$
    DECLARE vo_codenm VARCHAR(100);
BEGIN
    vo_codenm = null;

    SELECT CD_NM || CASE WHEN CD_CN IS NOT NULL THEN ' ('||CD_CN||')' ELSE '' END INTO vo_codenm
      FROM SYS_CODE
     WHERE UP_CD_ID     = vi_upper
       AND CD_ID        = vi_code
       AND USE_YN       = 'Y'
    ;

    RETURN vo_codenm;
END;
$body$

-- 2023.05.18 사용자명 조회
CREATE OR REPLACE FUNCTION FN_GET_USERNM (
    /**
     * =============================================================
     * title    : 사용자명 조회
     * author   : ntarget
     * date     : 2021.09.14
     * tables   : TB_USER
     * -------------------------------------------------------------
     *
     * @param       vi_userno   사용자번호
     * @return      vo_usernm   사용자명
     * =============================================================
     */
    vi_userno  character varying
)
  RETURNS character varying
  LANGUAGE plpgsql
AS
$body$
    DECLARE vo_usernm VARCHAR(100);
BEGIN
    vo_usernm = null;

    SELECT USER_NM INTO vo_usernm
      FROM TB_USER
     WHERE USER_NO = vi_userno
    ;

    RETURN vo_usernm;
END;
$body$

-- 2023.06.02 포맷된 데이터 조회
CREATE OR REPLACE FUNCTION FN_FMT_DATA(
    /**
     * =============================================================
     * name   : 포맷된 데이터 조회(전화번호...)
     * author : ntarget
     * date   : 2021.09.14
     * tables : NONE
     * -------------------------------------------------------------
     *
     * @param     vi_data           입력값
     * @param     vi_type           포맷타입
                                    1. [TEL]    : 전화번호(-사용), 
                                    2. [TEL-M]  : 전화번호[휴대전화번호] 마스킹 (ex 010-****-2222)                                                        
                                    3. [NUM]    : 데이터중 숫자만 남기고 변환
                                    4. [NUM2]   : 데이터중 숫자와소수점만 남기고 변환
                                    5. [RNO]    : 사업자등록번호
                                    6. [RRNO]   : 주민등록번호
                                    7. [RRNO-M] : 주민등록번호 마스킹 (ex 111111-2******)
                                    8. [NM] : 이름 (ex 홍*동)
     * @return    vo_fmt_data       포맷 데이터
     * =============================================================
     */
    vi_type character varying,
    vi_data character varying
)
  RETURNS character varying
  LANGUAGE plpgsql
AS
$body$
    DECLARE vo_fmt_data VARCHAR(100);
BEGIN

	vo_fmt_data = null;

    IF TRIM(vi_data) IS NOT NULL THEN
        IF TRIM(vi_type) = 'TEL' THEN
            vo_fmt_data = REGEXP_REPLACE(REGEXP_REPLACE(vi_data,'[^:digit:]]', 'g'),'(^02|050[[:digit:]]{1}|[[:digit:]]{3})([[:digit:]]{3,4})([[:digit:]]{4})','\1-\2-\3', 'g');
        ELSIF TRIM(vi_type) = 'TEL-M' THEN
            vo_fmt_data = REGEXP_REPLACE(REGEXP_REPLACE(vi_data,'[^:digit:]]', 'g'),'(^02|050[[:digit:]]{1}|[[:digit:]]{3})([[:digit:]]{3,4})([[:digit:]]{4})','\1-****-\3', 'g');
        ELSIF TRIM(vi_type) = 'NUM' THEN
            vo_fmt_data = REGEXP_REPLACE(vi_data, '[^0-9]+', '', 'g');
        ELSIF TRIM(vi_type) = 'NUM2' THEN
            vo_fmt_data = REGEXP_REPLACE(vi_data, '[^.0-9]+', '', 'g');
        ELSIF TRIM(vi_type) = 'RNO' THEN
            vo_fmt_data = REGEXP_REPLACE(vi_data, '^([0-9]{3})-?([0-9]{2})-?([0-9]{5})$', '\1-\2-\3', 'g');
        ELSIF TRIM(vi_type) = 'RRNO' THEN
            vo_fmt_data = REGEXP_REPLACE(vi_data, '(\d{6})(\d{1,7})', '\1-\2', 'g');
        ELSIF TRIM(vi_type) = 'RRNO-M' THEN
            vo_fmt_data = REGEXP_REPLACE(vi_data, '(\d{6})(\d{1})(\d{0,7})', '\1-\2' || '******', 'g');
        ELSIF TRIM(vi_type) = 'NM' THEN
            IF (LENGTH(TRIM(vi_data)) = 2) THEN
                vo_fmt_data = substr(vi_data,1,1)||'*';
            ELSE
                vo_fmt_data = substr(vi_data,1,1)||lpad('*', length(vi_data)-2, '*')||substr(vi_data, length(vi_data), 1);
            END IF;             
        END IF;
    END IF;

    RETURN vo_fmt_data;
END;
$body$

-- 2023.06.16 금액범위에 따른 코드 반환 
CREATE OR REPLACE FUNCTION FN_GET_FUNDSIZE(
    /**
     * =============================================================
     * name   : 금액범위에 따른 코드 반환 
     * author : LSH
     * date   : 2023.06.16
     * tables : NONE
     * -------------------------------------------------------------
     *
     * @param     vi_amt  금액
     * @return    vo_code 금액범위에 따른 코드반환
     * =============================================================
     */
    vi_amt numeric
)
  RETURNS character varying
  LANGUAGE plpgsql
AS
$body$
    DECLARE vo_code VARCHAR(10);
BEGIN

	vo_code = null;
	
	IF    vi_amt < ( 10*100) THEN vo_code = 'IH1'; -- 10억원 미만
	ELSIF vi_amt < ( 50*100) THEN vo_code = 'IH2'; -- 10억원 초과 ~ 50억원 이하
	ELSIF vi_amt < (100*100) THEN vo_code = 'IH3'; -- 50억원 초과 ~ 100억원 이하
	ELSIF vi_amt < (200*100) THEN vo_code = 'IH4'; -- 100억원 초과 ~ 200억원 이하
	END IF;

    RETURN vo_code;
END;
$body$


-- 2023.06.16 일자를 정형화하는 함수
CREATE OR REPLACE FUNCTION FN_GET_FORMDATE(
    /**
     * =============================================================
     * name   : 날짜 또는 년월 또는 년으로 들어온값을 날짜형태로 정형화하는 함수
     * author : LSH
     * date   : 2023.06.16
     * tables : NONE
     * -------------------------------------------------------------
     *
     * @param     vi_date 날짜문자열 (yyyy or yyyymm or yyyymmdd)
     * @param     vi_flag 시작일(B)/종료일(E) 구분
     * @return    vo_date 정형화한 날짜
     * =============================================================
     */
	vi_date character varying,
	vi_flag character varying
)
  RETURNS character varying
  LANGUAGE plpgsql
AS
$body$
    DECLARE vo_date VARCHAR(20);
BEGIN
	vo_date = REGEXP_REPLACE(vi_date, '[^0-9]+', '', 'g');
	
	IF LENGTH(vo_date) > 8 THEN
	   vo_date = SUBSTR(vo_date,1,8);
	ELSIF LENGTH(vo_date) = 6 THEN
		IF vi_flag = 'E' THEN
		   vo_date = TO_CHAR((date_trunc('MONTH', TO_DATE(vo_date||'01','YYYYMMDD')) + INTERVAL '1 MONTH - 1 day')::date,'YYYYMMDD');
		ELSE
		   vo_date = vo_date || '01';
		END IF;
	ELSIF LENGTH(vo_date) = 4 THEN
		IF vi_flag = 'E' THEN
		   vo_date = vo_date || '1231';
		ELSE
		   vo_date = vo_date || '0101';
		END IF;
	END IF;

    RETURN vo_date;
END;
$body$


-- 2023.04.25 진행상태조회
-- 2023.06.16 수정작업
CREATE OR REPLACE FUNCTION FN_GET_PRGRS (
    /**
     * =============================================================
     * title    : 날짜 범위 기준 진행상태 조회
     * author   : LSH
     * date     : 2023.04.25
     * tables   : tb_ent
     * -------------------------------------------------------------
     *
     * @param       vi_code   코드
     * @return      vo_name   코드명
     * 
     * 2023.06.16 날짜 정형화 함수(FN_GET_FORMDATE) 적용 
     * =============================================================
     */
    vi_bgng_ymd   character varying,
    vi_end_ymd    character varying
)
  RETURNS character varying
  LANGUAGE plpgsql
AS
$body$
    DECLARE vo_code VARCHAR(10);
BEGIN
	-- 종료상태
    vo_code = '90';

	SELECT CASE 
	       WHEN TO_CHAR(NOW(),'YYYYMMDD') BETWEEN FN_GET_FORMDATE(vi_bgng_ymd,'B') AND FN_GET_FORMDATE(vi_end_ymd,'E') THEN '10' -- 모집종
           WHEN TO_CHAR(NOW(),'YYYYMMDD') < FN_GET_FORMDATE(vi_bgng_ymd,'B') THEN '20' -- 모집예정
           ELSE '90' -- 모집종료
           END
      INTO vo_code
    ;
    RETURN vo_code;
END;
$body$
